import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import asyncio
import json
import logging
from optimizers import StochasticGradientDescent, GradientDescent, RMSProp, AdamW, Lion, Adan, MARS, AMSGrad, Adagrad, Adam, Sophia, LARS

logging.basicConfig(level=logging.INFO, filename="optimizer_debug.log")
logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="üß™AI Optimizers Playground",
    page_icon="üß™",
    layout="wide"
)

st.markdown("""
<style>
    .main {background-color: #f9fafb; color: #333;}
    .stButton>button {
        background-color: #0288d1; color: white; border: none; border-radius: 6px; 
        padding: 8px 16px; transition: background-color 0.2s;
    }
    .stButton>button:hover {background-color: #0277bd;}
    .metric-card {
        background: white; color: #333; border-radius: 8px; 
        padding: 15px; margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .stSelectbox, .stSlider, .stNumberInput {margin-bottom: 15px;}
    .st-expander {background: #fff; border-radius: 8px; box-shadow: 0 1px 2px rgba(0,0,0,0.1);}
    .plot-container {margin-top: 20px;}
    h1, h2, h3 {color: #333; font-family: 'Helvetica Neue', sans-serif;}
</style>
""", unsafe_allow_html=True)

st.title("AI Optimizers Playground")
st.markdown("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", unsafe_allow_html=True)

if 'trajectories' not in st.session_state:
    st.session_state.trajectories = {}
if 'run_simulation' not in st.session_state:
    st.session_state.run_simulation = False
if 'learning_rate' not in st.session_state:
    st.session_state.learning_rate = 0.001
if 'momentum' not in st.session_state:
    st.session_state.momentum = 0.9
if 'weight_decay' not in st.session_state:
    st.session_state.weight_decay = 0.01
if 'iterations' not in st.session_state:
    st.session_state.iterations = 100
if 'resolution' not in st.session_state:
    st.session_state.resolution = 100
if 'bounds' not in st.session_state:
    st.session_state.bounds = 5.0
if 'noise_level' not in st.session_state:
    st.session_state.noise_level = 0.1
if 'color_scheme' not in st.session_state:
    st.session_state.color_scheme = 'Viridis'

with st.sidebar:
    with st.expander("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", expanded=True):
        lr_col1, lr_col2 = st.columns([1, 1])
        with lr_col1:
            st.session_state.learning_rate = st.number_input(
                "–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", min_value=0.0001, max_value=0.1, value=st.session_state.learning_rate, 
                step=0.0001, format="%.4f", key="learning_rate_input"
            )
        with lr_col2:
            st.session_state.learning_rate = st.slider(
                "", 0.0001, 0.1, st.session_state.learning_rate, step=0.0001, format="%.4f", 
                label_visibility="collapsed", key="learning_rate_slider"
            )
        mom_col1, mom_col2 = st.columns([1, 1])
        with mom_col1:
            st.session_state.momentum = st.number_input(
                "–ú–æ–º–µ–Ω—Ç—É–º (Œ≤)", min_value=0.0, max_value=1.0, value=st.session_state.momentum, 
                step=0.01, format="%.2f", key="momentum_input"
            )
        with mom_col2:
            st.session_state.momentum = st.slider(
                "", 0.0, 1.0, st.session_state.momentum, step=0.01, format="%.2f", 
                label_visibility="collapsed", key="momentum_slider"
            )
        wd_col1, wd_col2 = st.columns([1, 1])
        with wd_col1:
            st.session_state.weight_decay = st.number_input(
                "Weight Decay", min_value=0.0, max_value=0.1, value=st.session_state.weight_decay, 
                step=0.01, format="%.2f", key="weight_decay_input"
            )
        with wd_col2:
            st.session_state.weight_decay = st.slider(
                "", 0.0, 0.1, st.session_state.weight_decay, step=0.01, format="%.2f", 
                label_visibility="collapsed", key="weight_decay_slider"
            )

    st.markdown("---")
    with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤"):
        optimizers = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã",
            ["SGD", "GD", "RMSProp", "AMSGrad", "Adagrad", "Adam", "AdamW", "Sophia", "Lion", "Adan", "MARS", "LARS"],
            default=["AdamW"],
            key="optimizers_select"
        )
        optimizer_params = {
            "AdamW": {"beta1": (0.0, 1.0, 0.9, 0.01, "%.2f"), "beta2": (0.0, 1.0, 0.999, 0.001, "%.3f")},
            "AMSGrad": {"beta1": (0.0, 1.0, 0.9, 0.01, "%.2f"), "beta2": (0.0, 1.0, 0.999, 0.001, "%.3f")},
            "Adam": {"beta1": (0.0, 1.0, 0.9, 0.01, "%.2f"), "beta2": (0.0, 1.0, 0.999, 0.001, "%.3f")},
            "Sophia": {"beta1": (0.0, 1.0, 0.9, 0.01, "%.2f"), "beta2": (0.0, 1.0, 0.999, 0.001, "%.3f")},
            "Lion": {"beta": (0.0, 1.0, 0.9, 0.01, "%.2f")},
            "LARS": {"trust_coeff": (0.0001, 0.01, 0.001, 0.0001, "%.4f")}
        }
        params = {}
        for opt in optimizers:
            if opt in optimizer_params:
                st.markdown(f"**{opt}**")
                for param, (min_val, max_val, default, step, fmt) in optimizer_params[opt].items():
                    param_key = f"{opt}_{param}"
                    if param_key not in st.session_state:
                        st.session_state[param_key] = default
                    col1, col2 = st.columns([1, 1])
                    with col1:
                        st.session_state[param_key] = st.number_input(
                            param, min_value=min_val, max_value=max_val, value=st.session_state[param_key], 
                            step=step, format=fmt, key=f"{param_key}_input"
                        )
                    with col2:
                        st.session_state[param_key] = st.slider(
                            "", min_val, max_val, st.session_state[param_key], step=step, format=fmt, 
                            label_visibility="collapsed", key=f"{param_key}_slider"
                        )
                    params[param_key] = st.session_state[param_key]

    st.markdown("---")
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏"):
        iter_col1, iter_col2 = st.columns([1, 1])
        with iter_col1:
            st.session_state.iterations = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", min_value=10, max_value=500, value=st.session_state.iterations, 
                step=1, format="%d", key="iterations_input"
            )
        with iter_col2:
            st.session_state.iterations = st.slider(
                "", 10, 500, st.session_state.iterations, step=1, format="%d", 
                label_visibility="collapsed", key="iterations_slider"
            )
        res_col1, res_col2 = st.columns([1, 1])
        with res_col1:
            st.session_state.resolution = st.number_input(
                "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–µ—Ç–∫–∏", min_value=50, max_value=300, value=st.session_state.resolution, 
                step=1, format="%d", key="resolution_input"
            )
        with res_col2:
            st.session_state.resolution = st.slider(
                "", 50, 300, st.session_state.resolution, step=1, format="%d", 
                label_visibility="collapsed", key="resolution_slider"
            )
        bnd_col1, bnd_col2 = st.columns([1, 1])
        with bnd_col1:
            st.session_state.bounds = st.number_input(
                "–î–∏–∞–ø–∞–∑–æ–Ω –æ—Å–µ–π (X, Y)", min_value=1.0, max_value=500.0, value=st.session_state.bounds, 
                step=0.5, format="%.1f", key="bounds_input"
            )
        with bnd_col2:
            st.session_state.bounds = st.slider(
                "", 1.0, 500.0, st.session_state.bounds, step=0.5, format="%.1f", 
                label_visibility="collapsed", key="bounds_slider"
            )
        test_func = st.selectbox(
            "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è", [
                "Quadratic", "Rastrigin", "Rosenbrock", "Himmelblau", 
                "Ackley", "Griewank", "Schwefel", "Levy", "Beale"
            ], 
            key="test_func_select"
        )

    st.markdown("---")
    with st.expander("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"):
        show_surface = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å", value=True, key="show_surface_cb")
        show_3d = st.checkbox("3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", value=True, key="show_3d_cb")
        show_colorbar = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —à–∫–∞–ª—É —Ü–≤–µ—Ç–æ–≤", value=True, key="show_colorbar_cb")
        st.session_state.color_scheme = st.selectbox(
            "–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞", ["Viridis", "Plasma", "Inferno", "Magma", "Cividis", "Plotly"],
            index=["Viridis", "Plasma", "Inferno", "Magma", "Cividis", "Plotly"].index(st.session_state.color_scheme),
            key="color_scheme_select"
        )
        add_noise = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —à—É–º –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã", value=False, key="add_noise_cb")
        if add_noise:
            noise_col1, noise_col2 = st.columns([1, 1])
            with noise_col1:
                st.session_state.noise_level = st.number_input(
                    "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞", min_value=0.0, max_value=1.0, value=st.session_state.noise_level, 
                    step=0.01, format="%.2f", key="noise_level_input"
                )
            with noise_col2:
                st.session_state.noise_level = st.slider(
                    "", 0.0, 1.0, st.session_state.noise_level, step=0.01, format="%.2f", 
                    label_visibility="collapsed", key="noise_level_slider"
                )
        else:
            st.session_state.noise_level = 0.0
        realtime_update = st.checkbox("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", value=True, key="realtime_update_cb")

    st.markdown("---")
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", key="run_simulation_btn"):
        st.session_state.run_simulation = True
        st.session_state.trajectories = {}
        try:
            st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
    
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", key="reset_btn"):
        st.session_state.trajectories = {}
        st.session_state.run_simulation = False
        st.cache_data.clear()
        try:
            st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
    
    save_results = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key="save_results_btn")

tab1, tab2, tab3, tab4 = st.tabs(["–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–ú–µ—Ç—Ä–∏–∫–∏", "–û–ø–∏—Å–∞–Ω–∏–µ", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"])

@st.cache_data
def generate_test_data(name, res, bnd):
    x = np.linspace(-bnd, bnd, res)
    y = np.linspace(-bnd, bnd, res)
    X, Y = np.meshgrid(x, y)
    if name == "Quadratic":
        Z = X**2 + Y**2
    elif name == "Rastrigin":
        Z = 10 * 2 + (X**2 - 10*np.cos(2*np.pi*X)) + (Y**2 - 10*np.cos(2*np.pi*Y))
    elif name == "Rosenbrock":
        Z = (1 - X)**2 + 100 * (Y - X**2)**2
    elif name == "Himmelblau":
        Z = (X**2 + Y - 11)**2 + (X + Y**2 - 7)**2
    elif name == "Ackley":
        Z = -20 * np.exp(-0.2 * np.sqrt(0.5 * (X**2 + Y**2))) - \
            np.exp(0.5 * (np.cos(2*np.pi*X) + np.cos(2*np.pi*Y))) + np.e + 20
    elif name == "Griewank":
        Z = (X**2 + Y**2) / 4000 - np.cos(X) * np.cos(Y / np.sqrt(2)) + 1
    elif name == "Schwefel":
        Z = 418.9829 * 2 - X * np.sin(np.sqrt(np.abs(X))) - Y * np.sin(np.sqrt(np.abs(Y)))
    elif name == "Levy":
        w_x = 1 + (X - 1) / 4
        w_y = 1 + (Y - 1) / 4
        Z = np.sin(np.pi * w_x)**2 + \
            (w_x - 1)**2 * (1 + 10 * np.sin(np.pi * w_x + 1)**2) + \
            (w_y - 1)**2 * (1 + np.sin(2 * np.pi * w_y)**2)
    elif name == "Beale":
        Z = (1.5 - X + X*Y)**2 + (2.25 - X + X*Y**2)**2 + (2.625 - X + X*Y**3)**2
    return X, Y, Z

test_functions = {
    "Quadratic": {
        "func": lambda p: np.sum(p**2),
        "grad": lambda p: 2 * p
    },
    "Rastrigin": {
        "func": lambda p: 10 * 2 + (p[0]**2 - 10*np.cos(2*np.pi*p[0])) + (p[1]**2 - 10*np.cos(2*np.pi*p[1])),
        "grad": lambda p: np.array([2*p[0] + 20*np.pi*np.sin(2*np.pi*p[0]), 2*p[1] + 20*np.pi*np.sin(2*np.pi*p[1])])
    },
    "Rosenbrock": {
        "func": lambda p: (1 - p[0])**2 + 100 * (p[1] - p[0]**2)**2,
        "grad": lambda p: np.array([-2*(1-p[0]) - 400*p[0]*(p[1]-p[0]**2), 200*(p[1]-p[0]**2)])
    },
    "Himmelblau": {
        "func": lambda p: (p[0]**2 + p[1] - 11)**2 + (p[0] + p[1]**2 - 7)**2,
        "grad": lambda p: np.array([4*p[0]*(p[0]**2 + p[1] - 11) + 2*(p[0] + p[1]**2 - 7), 
                                  2*(p[0]**2 + p[1] - 11) + 4*p[1]*(p[0] + p[1]**2 - 7)])
    },
    "Ackley": {
        "func": lambda p: -20 * np.exp(-0.2 * np.sqrt(0.5 * (p[0]**2 + p[1]**2))) - \
                         np.exp(0.5 * (np.cos(2*np.pi*p[0]) + np.cos(2*np.pi*p[1]))) + np.e + 20,
        "grad": lambda p: np.array([
            2 * np.exp(-0.2 * np.sqrt(0.5 * (p[0]**2 + p[1]**2))) * p[0] / np.sqrt(0.5 * (p[0]**2 + p[1]**2)) + \
            np.pi * np.sin(2*np.pi*p[0]) * np.exp(0.5 * (np.cos(2*np.pi*p[0]) + np.cos(2*np.pi*p[1]))),
            2 * np.exp(-0.2 * np.sqrt(0.5 * (p[0]**2 + p[1]**2))) * p[1] / np.sqrt(0.5 * (p[0]**2 + p[1]**2)) + \
            np.pi * np.sin(2*np.pi*p[1]) * np.exp(0.5 * (np.cos(2*np.pi*p[0]) + np.cos(2*np.pi*p[1])))
        ])
    },
    "Griewank": {
        "func": lambda p: (p[0]**2 + p[1]**2) / 4000 - np.cos(p[0]) * np.cos(p[1] / np.sqrt(2)) + 1,
        "grad": lambda p: np.array([
            p[0] / 2000 + np.sin(p[0]) * np.cos(p[1] / np.sqrt(2)),
            p[1] / 2000 + np.cos(p[0]) * np.sin(p[1] / np.sqrt(2)) / np.sqrt(2)
        ])
    },
    "Schwefel": {
        "func": lambda p: 418.9829 * 2 - p[0] * np.sin(np.sqrt(np.abs(p[0]))) - p[1] * np.sin(np.sqrt(np.abs(p[1]))),
        "grad": lambda p: np.array([
            -np.sin(np.sqrt(np.abs(p[0]))) - (p[0] * np.cos(np.sqrt(np.abs(p[0])))) / (2 * np.sqrt(np.abs(p[0]))) if p[0] != 0 else 0,
            -np.sin(np.sqrt(np.abs(p[1]))) - (p[1] * np.cos(np.sqrt(np.abs(p[1])))) / (2 * np.sqrt(np.abs(p[1]))) if p[1] != 0 else 0
        ])
    },
    "Levy": {
        "func": lambda p: np.sin(np.pi * (1 + (p[0] - 1) / 4))**2 + \
                         ((1 + (p[0] - 1) / 4) - 1)**2 * (1 + 10 * np.sin(np.pi * (1 + (p[0] - 1) / 4) + 1)**2) + \
                         ((1 + (p[1] - 1) / 4) - 1)**2 * (1 + np.sin(2 * np.pi * (1 + (p[1] - 1) / 4))**2),
        "grad": lambda p: np.array([
            np.pi * np.cos(np.pi * (1 + (p[0] - 1) / 4)) * np.sin(np.pi * (1 + (p[0] - 1) / 4)) / 2 + \
            (p[0] - 5) / 8 * (1 + 10 * np.sin(np.pi * (1 + (p[0] - 1) / 4) + 1)**2) + \
            5 * np.pi * (p[0] - 5)**2 / 16 * np.cos(np.pi * (1 + (p[0] - 1) / 4) + 1) * \
            np.sin(np.pi * (1 + (p[0] - 1) / 4) + 1),
            (p[1] - 5) / 8 * (1 + np.sin(2 * np.pi * (1 + (p[1] - 1) / 4))**2) + \
            np.pi * (p[1] - 5)**2 / 8 * np.cos(2 * np.pi * (1 + (p[1] - 1) / 4)) * \
            np.sin(2 * np.pi * (1 + (p[1] - 1) / 4))
        ])
    },
    "Beale": {
        "func": lambda p: (1.5 - p[0] + p[0]*p[1])**2 + (2.25 - p[0] + p[0]*p[1]**2)**2 + (2.625 - p[0] + p[0]*p[1]**3)**2,
        "grad": lambda p: np.array([
            2 * (1.5 - p[0] + p[0]*p[1]) * (-1 + p[1]) + \
            2 * (2.25 - p[0] + p[0]*p[1]**2) * (-1 + p[1]**2) + \
            2 * (2.625 - p[0] + p[0]*p[1]**3) * (-1 + p[1]**3),
            2 * (1.5 - p[0] + p[0]*p[1]) * p[0] + \
            2 * (2.25 - p[0] + p[0]*p[1]**2) * (2*p[0]*p[1]) + \
            2 * (2.625 - p[0] + p[0]*p[1]**3) * (3*p[0]*p[1]**2)
        ])
    }
}

@st.cache_resource
def init_optimizer(opt_name, lr, momentum, wd, params):
    if opt_name == "SGD":
        return StochasticGradientDescent(learning_rate=lr, momentum=momentum)
    elif opt_name == "GD":
        return GradientDescent(learning_rate=lr)
    elif opt_name == "RMSProp":
        return RMSProp(learning_rate=lr, momentum=momentum)
    elif opt_name == "AMSGrad":
        return AMSGrad(learning_rate=lr, beta1=params.get(f"{opt_name}_beta1", 0.9), beta2=params.get(f"{opt_name}_beta2", 0.999))
    elif opt_name == "Adagrad":
        return Adagrad(learning_rate=lr)
    elif opt_name == "Adam":
        return Adam(learning_rate=lr, beta1=params.get(f"{opt_name}_beta1", 0.9), beta2=params.get(f"{opt_name}_beta2", 0.999))
    elif opt_name == "AdamW":
        return AdamW(learning_rate=lr, beta1=params.get(f"{opt_name}_beta1", 0.9), beta2=params.get(f"{opt_name}_beta2", 0.999), weight_decay=wd)
    elif opt_name == "Sophia":
        return Sophia(learning_rate=lr, beta1=params.get(f"{opt_name}_beta1", 0.9), beta2=params.get(f"{opt_name}_beta2", 0.999))
    elif opt_name == "Lion":
        return Lion(learning_rate=lr, beta=params.get(f"{opt_name}_beta", 0.9), weight_decay=wd)
    elif opt_name == "Adan":
        return Adan(learning_rate=lr, weight_decay=wd)
    elif opt_name == "MARS":
        return MARS(learning_rate=lr, momentum=momentum)
    elif opt_name == "LARS":
        return LARS(learning_rate=lr, momentum=momentum, trust_coeff=params.get(f"{opt_name}_trust_coeff", 0.001), weight_decay=wd)
    return None

async def run_optimization(opt, start_params, test_func, iterations, noise_level, bounds):
    params = [start_params.copy()]
    trajectory = [start_params.copy()]
    losses = [test_functions[test_func]["func"](start_params)]
    grad_norms = []
    local_lrs = [] if opt.__class__.__name__ == "LARS" else None
    
    try:
        for i in range(iterations):
            grad = test_functions[test_func]["grad"](params[0])
            if add_noise:
                grad += np.random.normal(0, noise_level, size=grad.shape)
                
            if np.any(np.isnan(grad)) or np.any(np.isinf(grad)):
                st.error(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è {opt.__class__.__name__}")
                break
                
            updated = opt.step(params, [grad])
            updated[0] = np.clip(updated[0], -bounds, bounds)
            trajectory.append(updated[0].copy())
            loss = test_functions[test_func]["func"](updated[0])
            losses.append(loss)
            grad_norms.append(np.linalg.norm(grad) if grad is not None else 0)
            params = updated
            
            logger.info(f"{opt.__class__.__name__} | Iter {i+1} | Loss: {loss:.4f} | Grad Norm: {grad_norms[-1]:.4f}")
            if opt.__class__.__name__ == "LARS":
                param_norm = np.linalg.norm(params[0])
                grad_norm = np.linalg.norm(grad)
                local_lr = opt.trust_coeff * param_norm / (grad_norm + opt.weight_decay * param_norm + 1e-6) if param_norm > 0 and grad_norm > 0 else 1.0
                local_lrs.append(local_lr)
                logger.info(f"LARS | local_lr: {local_lr:.6f}")
            
            await asyncio.sleep(0)
        return trajectory, losses, grad_norms, local_lrs
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {opt.__class__.__name__}: {e}")
        return trajectory, losses, grad_norms, local_lrs

X, Y, Z = generate_test_data(test_func, st.session_state.resolution, st.session_state.bounds)

progress_bar = st.progress(0)
if st.session_state.run_simulation and optimizers:
    start = np.random.uniform(-st.session_state.bounds, st.session_state.bounds, size=(2,))
    for idx, opt_name in enumerate(optimizers):
        if opt_name not in st.session_state.trajectories:
            opt = init_optimizer(opt_name, st.session_state.learning_rate, st.session_state.momentum, st.session_state.weight_decay, params)
            trajectory, losses, grad_norms, local_lrs = asyncio.run(
                run_optimization(opt, start, test_func, st.session_state.iterations, st.session_state.noise_level, st.session_state.bounds)
            )
            st.session_state.trajectories[opt_name] = {
                'traj': trajectory,
                'loss': losses,
                'grad_norms': grad_norms,
                'local_lrs': local_lrs
            }
        progress_bar.progress((idx + 1) / len(optimizers))

with tab1:
    if not st.session_state.run_simulation and not st.session_state.trajectories:
        st.info("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é'.")
    elif st.session_state.run_simulation and not st.session_state.trajectories:
        st.info("–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
    elif st.session_state.trajectories:
        st.success("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    if st.session_state.trajectories:
        fig = go.Figure()
        opt_colors = px.colors.qualitative.Plotly
        if len(optimizers) > len(opt_colors):
            opt_colors = opt_colors * (len(optimizers) // len(opt_colors) + 1)

        if show_3d:
            if show_surface:
                fig.add_trace(go.Surface(
                    x=X, y=Y, z=Z, opacity=0.7, 
                    colorscale=st.session_state.color_scheme, 
                    showscale=show_colorbar,
                    showlegend=False
                ))
            for idx, (opt_name, data) in enumerate(st.session_state.trajectories.items()):
                min_len = min(len(data['traj']), len(data['loss']))
                if min_len == 0:
                    st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {opt_name}")
                    continue
                df = pd.DataFrame({
                    'x': [p[0] for p in data['traj'][:min_len]],
                    'y': [p[1] for p in data['traj'][:min_len]],
                    'loss': data['loss'][:min_len],
                    'iteration': list(range(min_len))
                })
                fig.add_trace(go.Scatter3d(
                    x=df['x'], y=df['y'], z=df['loss'],
                    mode='markers+lines', name=opt_name,
                    marker=dict(size=4, color=opt_colors[idx]), 
                    line=dict(width=2, color=opt_colors[idx]),
                    showlegend=True,
                    customdata=df[['iteration', 'loss']],
                    hovertemplate="–ò—Ç–µ—Ä–∞—Ü–∏—è: %{customdata[0]}<br>Loss: %{customdata[1]:.4f}<br>x: %{x:.2f}<br>y: %{y:.2f}"
                ))
            fig.update_layout(title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤ –Ω–∞ {test_func} (3D)")
        else:
            fig.add_trace(go.Contour(
                x=X[0, :], y=Y[:, 0], z=Z,
                colorscale=st.session_state.color_scheme,
                showscale=show_colorbar,
                showlegend=False,
                colorbar=dict(
                    x=1.02,  
                    len=0.8,  
                    thickness=15
                )
            ))
            for idx, (opt_name, data) in enumerate(st.session_state.trajectories.items()):
                min_len = min(len(data['traj']), len(data['loss']))
                if min_len == 0:
                    st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {opt_name}")
                    continue
                df = pd.DataFrame({
                    'x': [p[0] for p in data['traj'][:min_len]],
                    'y': [p[1] for p in data['traj'][:min_len]],
                    'iteration': list(range(min_len))
                })
                fig.add_trace(go.Scatter(
                    x=df['x'], y=df['y'],
                    mode='markers+lines', name=opt_name,
                    marker=dict(size=8, color=opt_colors[idx]),
                    line=dict(width=2, color=opt_colors[idx]),
                    showlegend=True,
                    customdata=df[['iteration']],
                    hovertemplate="–ò—Ç–µ—Ä–∞—Ü–∏—è: %{customdata[0]}<br>x: %{x:.2f}<br>y: %{y:.2f}"
                ))
            fig.update_layout(
                title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤ –Ω–∞ {test_func} (2D)",
                margin=dict(r=100)  
            )

        frames = []
        max_traj_len = max(len(data['traj']) for data in st.session_state.trajectories.values()) if st.session_state.trajectories else 1
        frame_step = max(1, max_traj_len // 50)
        for i in range(1, max_traj_len, frame_step):
            frame_data = []
            if show_3d and show_surface:
                frame_data.append(go.Surface(
                    x=X, y=Y, z=Z, opacity=0.7, 
                    colorscale=st.session_state.color_scheme, 
                    showlegend=False
                ))
            for idx, (opt_name, data) in enumerate(st.session_state.trajectories.items()):
                if i <= len(data['traj']):
                    min_len = min(len(data['traj'][:i]), len(data['loss']))
                    if min_len == 0:
                        continue
                    df = pd.DataFrame({
                        'x': [p[0] for p in data['traj'][:min_len]],
                        'y': [p[1] for p in data['traj'][:min_len]],
                        'loss': data['loss'][:min_len],
                        'iteration': list(range(min_len))
                    })
                    if show_3d:
                        frame_data.append(go.Scatter3d(
                            x=df['x'], y=df['y'], z=df['loss'],
                            mode='markers+lines', name=opt_name,
                            marker=dict(size=4, color=opt_colors[idx]),
                            line=dict(width=2, color=opt_colors[idx]),
                            showlegend=True
                        ))
                    else:
                        frame_data.append(go.Scatter(
                            x=df['x'], y=df['y'],
                            mode='markers+lines', name=opt_name,
                            marker=dict(size=8, color=opt_colors[idx]),
                            line=dict(width=2, color=opt_colors[idx]),
                            showlegend=True
                        ))
            frames.append(go.Frame(data=frame_data, name=str(i)))

        fig.update(frames=frames)
        fig.update_layout(
            updatemenus=[dict(
                type="buttons",
                buttons=[dict(label="Play", method="animate", args=[None, {"frame": {"duration": 50, "redraw": True}, "fromcurrent": True}])]
            )],
            showlegend=True,
            margin=dict(l=20, r=100, t=50, b=20)
        )

        if realtime_update or not st.session_state.trajectories:
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–º—É–ª—è—Ü–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.")

with tab2:
    if st.session_state.trajectories:
        st.markdown("### –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        metrics_data = []
        for opt_name, data in st.session_state.trajectories.items():
            if data['loss']:
                final_loss = data['loss'][-1]
                iterations_done = len(data['loss']) - 1
                avg_grad_norm = np.mean(data['grad_norms']) if data['grad_norms'] else 0
                avg_local_lr = np.mean(data['local_lrs']) if data['local_lrs'] else None
                metric = {
                    "–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä": opt_name,
                    "–§–∏–Ω–∞–ª—å–Ω—ã–π Loss": f"{final_loss:.4f}",
                    "–ò—Ç–µ—Ä–∞—Ü–∏–∏": iterations_done,
                    "–°—Ä–µ–¥–Ω—è—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤": f"{avg_grad_norm:.4f}"
                }
                if avg_local_lr is not None:
                    metric["–°—Ä–µ–¥–Ω–∏–π local_lr (LARS)"] = f"{avg_local_lr:.6f}"
                metrics_data.append(metric)
        if metrics_data:
            st.dataframe(pd.DataFrame(metrics_data), use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫")

        st.markdown("### –ò—Å—Ç–æ—Ä–∏—è Loss")
        loss_fig = go.Figure()
        for idx, (opt_name, data) in enumerate(st.session_state.trajectories.items()):
            if data['loss']:
                df_loss = pd.DataFrame({'Loss': data['loss'], 'Iteration': range(len(data['loss']))})
                loss_fig.add_trace(go.Scatter(
                    x=df_loss['Iteration'], y=df_loss['Loss'], 
                    mode='lines', name=opt_name,
                    line=dict(color=opt_colors[idx])
                ))
        loss_fig.update_layout(title='Loss (–ª–æ–≥. —à–∫–∞–ª–∞)', yaxis_type="log", margin=dict(l=20, r=20, t=50, b=20))
        st.plotly_chart(loss_fig, use_container_width=True)

        st.markdown("### –ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤")
        grad_fig = go.Figure()
        for idx, (opt_name, data) in enumerate(st.session_state.trajectories.items()):
            if data['grad_norms']:
                df_grad = pd.DataFrame({'GradNorm': data['grad_norms'], 'Iteration': range(1, len(data['grad_norms']) + 1)})
                grad_fig.add_trace(go.Scatter(
                    x=df_grad['Iteration'], y=df_grad['GradNorm'], 
                    mode='lines', name=opt_name,
                    line=dict(color=opt_colors[idx])
                ))
        grad_fig.update_layout(title='–ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤', margin=dict(l=20, r=20, t=50, b=20))
        st.plotly_chart(grad_fig, use_container_width=True)
    else:
        st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–º—É–ª—è—Ü–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏.")

with tab3:
    st.markdown(f"### –û {test_func}")
    if test_func == "Quadratic":
        st.markdown("–ü—Ä–æ—Å—Ç–∞—è –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = x¬≤ + y¬≤ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (0,0). –ò–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤.")
    elif test_func == "Rastrigin":
        st.markdown("–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = 20 + x¬≤ + y¬≤ - 10(cos(2œÄx) + cos(2œÄy)) —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (0,0). –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ —É—Å–ª–æ–∂–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.")
    elif test_func == "Rosenbrock":
        st.markdown("–ù–µ–ª–∏–Ω–µ–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = (1 - x)¬≤ + 100(y - x¬≤)¬≤ —Å —É–∑–∫–æ–π –¥–æ–ª–∏–Ω–æ–π –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (1,1). –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º.")
    elif test_func == "Himmelblau":
        st.markdown("–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = (x¬≤ + y - 11)¬≤ + (x + y¬≤ - 7)¬≤ —Å —á–µ—Ç—ã—Ä—å–º—è –º–∏–Ω–∏–º—É–º–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º.")
    elif test_func == "Ackley":
        st.markdown("–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = -20 exp(-0.2 ‚àö(0.5(x¬≤ + y¬≤))) - exp(0.5(cos(2œÄx) + cos(2œÄy))) + e + 20 —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (0,0). –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å.")
    elif test_func == "Griewank":
        st.markdown("–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = (x¬≤ + y¬≤)/4000 - cos(x) cos(y/‚àö2) + 1 —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (0,0). –®–∏—Ä–æ–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã —Ç–µ—Å—Ç–∏—Ä—É—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫.")
    elif test_func == "Schwefel":
        st.markdown("–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = 418.9829¬∑2 - x sin(‚àö|x|) - y sin(‚àö|y|) —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (420.9687, 420.9687). –ì–ª—É–±–æ–∫–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã —É—Å–ª–æ–∂–Ω—è—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫.")
    elif test_func == "Levy":
        st.markdown("–ù–µ–ª–∏–Ω–µ–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (1,1). –ü–ª–æ—Å–∫–∏–µ —É—á–∞—Å—Ç–∫–∏ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –¥–µ–ª–∞—é—Ç –µ—ë —Å–ª–æ–∂–Ω–æ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –ø–ª–∞—Ç–æ.")
    elif test_func == "Beale":
        st.markdown("–ù–µ–ª–∏–Ω–µ–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = (1.5 - x + xy)¬≤ + (2.25 - x + xy¬≤)¬≤ + (2.625 - x + xy¬≥)¬≤ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (3, 0.5). –£–∑–∫–∏–µ –¥–æ–ª–∏–Ω—ã —Ç–µ—Å—Ç–∏—Ä—É—é—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤.")

    st.markdown("### –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã")
    for opt_name in optimizers:
        with st.expander(opt_name):
            if opt_name == "SGD":
                st.markdown("""
                **–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (SGD)** –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö. –ú–æ–º–µ–Ω—Ç—É–º —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, —É—Å–∫–æ—Ä—è—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å.
                
                - **–ü–ª—é—Å—ã**: –ü—Ä–æ—Å—Ç–æ—Ç–∞, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.
                - **–ú–∏–Ω—É—Å—ã**: –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –≤—ã–±–æ—Ä—É —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è, –º–æ–∂–µ—Ç –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–∞—Ö.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥–ª—É–±–æ–∫–æ–º –æ–±—É—á–µ–Ω–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π (CNN, RNN).
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `learning_rate=0.01‚Äì0.1`, `momentum=0.9`. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ `lr` —Å –ø–æ–º–æ—â—å—é —à–µ–¥—É–ª–µ—Ä–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
                """)
            elif opt_name == "GD":
                st.markdown("""
                **–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (GD)** –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—è –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞. –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
                
                - **–ü–ª—é—Å—ã**: –ù–∞–¥–µ–∂–µ–Ω –Ω–∞ –≤—ã–ø—É–∫–ª—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å –º–∞–ª—ã–º `lr`.
                - **–ú–∏–Ω—É—Å—ã**: –ú–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–∞–¥–∞—á –∏–ª–∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–ª—ã–π `learning_rate=0.001‚Äì0.01`. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.
                """)
            elif opt_name == "RMSProp":
                st.markdown("""
                **RMSProp** –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è, –Ω–æ—Ä–º–∞–ª–∏–∑—É—è –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –ø–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ç—É—Ö–∞—é—â–µ–π —Å—Ä–µ–¥–Ω–µ–π –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤. –≠—Ç–æ —É–ª—É—á—à–∞–µ—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞ –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
                
                - **–ü–ª—é—Å—ã**: –£—Å—Ç–æ–π—á–∏–≤ –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º, —Ö–æ—Ä–æ—à –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç–µ–π.
                - **–ú–∏–Ω—É—Å—ã**: –ú–æ–∂–µ—Ç –±—ã—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π (RNN) –∏ –∑–∞–¥–∞—á —Å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `learning_rate=0.001`, `momentum=0.9`. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ö —Ç–∏–ø–∞ `Rosenbrock`.
                """)
            elif opt_name == "AMSGrad":
                st.markdown("""
                **AMSGrad** ‚Äî –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è Adam, –∫–æ—Ç–æ—Ä–∞—è —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞ —Å—á–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.
                
                - **–ü–ª—é—Å—ã**: –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤, —á–µ–º Adam, –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞—Ö.
                - **–ú–∏–Ω—É—Å—ã**: –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ Adam –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ Adam –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `learning_rate=0.001`, `beta1=0.9`, `beta2=0.999`. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ `Rastrigin` –∏–ª–∏ `Ackley`.
                """)
            elif opt_name == "Adagrad":
                st.markdown("""
                **Adagrad** –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –¥–µ–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç –Ω–∞ —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø—Ä–æ—à–ª—ã—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —É—Å—Ç–æ–π—á–∏–≤—ã–º –¥–ª—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
                
                - **–ü–ª—é—Å—ã**: –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `lr`.
                - **–ú–∏–Ω—É—Å—ã**: –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –º–æ–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ —É–º–µ–Ω—å—à–∞—Ç—å—Å—è, –∑–∞–º–µ–¥–ª—è—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–¥–∞—á–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ù–∞—á–Ω–∏—Ç–µ —Å `learning_rate=0.01`. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è `Quadratic`, –Ω–æ –∏–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞ `Himmelblau`.
                """)
            elif opt_name == "Adam":
                st.markdown("""
                **Adam** —Å–æ—á–µ—Ç–∞–µ—Ç –º–æ–º–µ–Ω—Ç—É–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤. –≠—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤.
                
                - **–ü–ª—é—Å—ã**: –ë—ã—Å—Ç—Ä–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –∑–∞–¥–∞—á.
                - **–ú–∏–Ω—É—Å—ã**: –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω –Ω–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö, —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π (CNN) –∏ –æ–±—â–µ–≥–æ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `learning_rate=0.001`, `beta1=0.9`, `beta2=0.999`. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ `Rosenbrock` –∏–ª–∏ `Griewank`.
                """)
            elif opt_name == "AdamW":
                st.markdown("""
                **AdamW** ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Adam —Å –¥–µ–∫—É–ø–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π –≤–µ—Å–æ–≤ (weight decay). –≠—Ç–æ —É–ª—É—á—à–∞–µ—Ç –æ–±–æ–±—â–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π.
                
                - **–ü–ª—é—Å—ã**: –õ—É—á—à–µ –æ–±–æ–±—â–∞–µ—Ç, —á–µ–º Adam, —É—Å—Ç–æ–π—á–∏–≤ –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
                - **–ú–∏–Ω—É—Å—ã**: –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `weight_decay`.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö CNN –∏ Transformer.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `learning_rate=0.001`, `beta1=0.9`, `beta2=0.999`, `weight_decay=0.01`. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ `Levy` –∏–ª–∏ `Beale`.
                """)
            elif opt_name == "Sophia":
                st.markdown("""
                **Sophia** ‚Äî —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ—Å—Å–∏–∞–Ω–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π.
                
                - **–ü–ª—é—Å—ã**: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π, —É—Å—Ç–æ–π—á–∏–≤ –∫ —à—É–º—É.
                - **–ú–∏–Ω—É—Å—ã**: –í—ã—Å–æ–∫–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π (LLM).
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `learning_rate=0.0001`, `beta1=0.9`, `beta2=0.999`. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ `Ackley` –∏–ª–∏ `Schwefel`.
                """)
            elif opt_name == "Lion":
                st.markdown("""
                **Lion** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (sign) –≤–º–µ—Å—Ç–æ –µ–≥–æ –≤–µ–ª–∏—á–∏–Ω—ã, —á—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π.
                
                - **–ü–ª—é—Å—ã**: –ü—Ä–æ—Å—Ç–æ—Ç–∞, –º–µ–Ω—å—à–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø–∞–º—è—Ç–∏, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ Transformer.
                - **–ú–∏–Ω—É—Å—ã**: –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º –Ω–∞ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Transformer –∏ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `learning_rate=0.0001`, `beta=0.9‚Äì0.95`, `weight_decay=0.01`. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ `Griewank` –∏–ª–∏ `Rastrigin`.
                """)
            elif opt_name == "Adan":
                st.markdown("""
                **Adan** –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤, —É—Å–∫–æ—Ä—è—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å. –≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
                
                - **–ü–ª—é—Å—ã**: –ë—ã—Å—Ç—Ä–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª—è—Ö.
                - **–ú–∏–Ω—É—Å—ã**: –°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã—Å–æ–∫–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Transformer –∏ –±–æ–ª—å—à–∏—Ö CNN.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ù–∞—á–Ω–∏—Ç–µ —Å `learning_rate=0.001`, `weight_decay=0.01`. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ `Himmelblau` –∏–ª–∏ `Levy`.
                """)
            elif opt_name == "MARS":
                st.markdown("""
                **MARS** ‚Äî –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–º–µ–Ω—Ç—É–º –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è.
                
                - **–ü–ª—é—Å—ã**: –ì–∏–±–∫–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
                - **–ú–∏–Ω—É—Å—ã**: –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏, –≥–¥–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `learning_rate=0.001`, `momentum=0.9`. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ `Quadratic` –∏–ª–∏ `Beale`.
                """)
            elif opt_name == "LARS":
                st.markdown("""
                **LARS (Layer-wise Adaptive Rate Scaling)** –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–æ—Ä–º–∞—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π.
                
                - **–ü–ª—é—Å—ã**: –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–∞—Ö, —Ö–æ—Ä–æ—à–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.
                - **–ú–∏–Ω—É—Å—ã**: –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `trust_coeff`, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º –Ω–∞ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
                - **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±—É—á–µ–Ω–∏–∏ –±–æ–ª—å—à–∏—Ö CNN –∏ Transformer, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏.
                - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `learning_rate=0.0001‚Äì0.01`, `trust_coeff=0.0005‚Äì0.002`, `momentum=0.9`. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ `Schwefel` –∏–ª–∏ `Rosenbrock`.
                """)

with tab4:
    with st.expander("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", expanded=True):
        st.markdown("""
        1. –í –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
        2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞.
        3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
        4. –ù–∞–∂–º–∏—Ç–µ **"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é"** –¥–ª—è –∑–∞–ø—É—Å–∫–∞.
        5. –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é **"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"**.
        7. –ù–∞–∂–º–∏—Ç–µ **"üîÑ –°–±—Ä–æ—Å–∏—Ç—å"** –¥–ª—è –Ω–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏.
        """)
    with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        st.markdown("""
        - **–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è**: –†–∞–∑–º–µ—Ä —à–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (0.0001‚Äì0.1).
        - **–ú–æ–º–µ–Ω—Ç—É–º (Œ≤)**: –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (0.0‚Äì1.0).
        - **Weight Decay**: –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ (0.0‚Äì0.1).
        - **–ò—Ç–µ—Ä–∞—Ü–∏–∏**: –ß–∏—Å–ª–æ —à–∞–≥–æ–≤ (10‚Äì500).
        - **–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è**: –õ–∞–Ω–¥—à–∞—Ñ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (Quadratic, Rastrigin, Ackley –∏ –¥—Ä.).
        - **–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–µ—Ç–∫–∏**: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (50‚Äì300).
        - **–î–∏–∞–ø–∞–∑–æ–Ω –æ—Å–µ–π**: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ (1.0‚Äì500.0, —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è Schwefel).
        - **–®—É–º**: –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–º–µ—Ö–∏ –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞—Ö (0.0‚Äì1.0).
        - **–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞**: –°—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–æ–≤ (Viridis, Plasma –∏ –¥—Ä.).
        - **trust_coeff (LARS)**: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–≤–µ—Ä–∏—è (0.0001‚Äì0.01).
        - **beta1, beta2 (Adam, AdamW, AMSGrad, Sophia)**: –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.
        - **beta (Lion)**: –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """)
    with st.expander("–°–æ–≤–µ—Ç—ã"):
        st.markdown("""
        - –î–ª—è `LARS` –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `trust_coeff=0.0005‚Äì0.002` –∏ `learning_rate=0.0001‚Äì0.01`. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ `Schwefel`.
        - –î–ª—è `Lion` –ø–æ–ø—Ä–æ–±—É–π—Ç–µ `learning_rate=0.0001`, `beta=0.9‚Äì0.95`. –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ `Griewank`.
        - –ù–∞—á–Ω–∏—Ç–µ —Å `Quadratic` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ `Ackley` –∏–ª–∏ `Levy`.
        - –î–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (`Rastrigin`, `Ackley`) —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ `iterations` –¥–æ 200‚Äì500.
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–ª–∏—Ç—Ä—É `Plotly` –¥–ª—è —á–µ—Ç–∫–æ–≥–æ —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤ –≤ 2D-—Ä–µ–∂–∏–º–µ.
        - –û—Ç–∫–ª—é—á–∏—Ç–µ —à–∫–∞–ª—É —Ü–≤–µ—Ç–æ–≤ –≤ 2D, –µ—Å–ª–∏ –æ–Ω–∞ –º–µ—à–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º.
        - –û—Ç–∫–ª—é—á–∏—Ç–µ —à—É–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ `Beale` –∏–ª–∏ `Rosenbrock`.
        """)


if save_results and st.session_state.trajectories:
    results = {}
    for opt_name, data in st.session_state.trajectories.items():
        min_len = min(len(data['traj']), len(data['loss']))
        if min_len == 0:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è {opt_name}")
            continue
        df = pd.DataFrame({
            'x': [p[0] for p in data['traj'][:min_len]],
            'y': [p[1] for p in data['traj'][:min_len]],
            'loss': data['loss'][:min_len],
            'grad_norm': data['grad_norms'][:min_len] if data['grad_norms'] else [0] * min_len
        })
        df.to_csv(f"{opt_name}_{test_func}_results.csv", index=False)
        results[opt_name] = df.to_dict()
    with open(f"{test_func}_results.json", "w") as f:
        json.dump(results, f)
    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV –∏ JSON!")
    with tab2:
        st.markdown("### –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        for opt_name, data in results.items():
            st.markdown(f"**{opt_name}**")
            st.dataframe(pd.DataFrame(data))
