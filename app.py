import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import asyncio
from optimizers import StochasticGradientDescent, GradientDescent, RMSProp, AdamW, Lion, Adan, MARS

st.set_page_config(
    page_title="AI Optimizers Playground",
    page_icon="üìä",
    layout="wide"
)

def set_theme(theme):
    if theme == "–¢–µ–º–Ω–∞—è":
        return """
        <style>
            .main {background-color: #1e1e1e; color: white;}
            .stButton>button {background-color: #4CAF50; color: white; border-radius: 8px; padding: 8px 16px;}
            .metric-card {background: #2e2e2e; color: white; border-radius: 10px; padding: 15px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);}
            .stSelectbox, .stSlider {margin-bottom: 20px;}
            .plot-container {margin-top: 30px;}
        </style>
        """
    return """
    <style>
        .main {background-color: #f8f9fa;}
        .stButton>button {border-radius: 8px; padding: 8px 16px;}
        .metric-card {border-radius: 10px; padding: 15px; background: white; box-shadow: 0 4px 6px rgba(0,0,0,0.1);}
        .stSelectbox, .stSlider {margin-bottom: 20px;}
        .plot-container {margin-top: 30px;}
    </style>
    """

st.title("üß† AI Optimizers Playground")
st.markdown("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏")

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    theme = st.selectbox("–¢–µ–º–∞", ["–°–≤–µ—Ç–ª–∞—è", "–¢–µ–º–Ω–∞—è"], index=0)
    st.markdown(set_theme(theme), unsafe_allow_html=True)
    
    optimizers = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã",
        ["SGD", "GD", "RMSProp", "AdamW", "Lion", "Adan", "MARS"],
        default=["AdamW"]
    )
    learning_rate = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", 0.0001, 0.1, 0.001, format="%.4f")
    momentum = st.slider("–ú–æ–º–µ–Ω—Ç—É–º (Œ≤)", 0.0, 1.0, 0.9)
    weight_decay = st.slider("Weight Decay", 0.0, 0.1, 0.01)
    iterations = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π", 10, 500, 100)
    
    st.markdown("---")
    test_func = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        ["Quadratic", "Rastrigin", "Rosenbrock", "Himmelblau"]
    )
    resolution = st.slider("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–µ—Ç–∫–∏", 50, 300, 100)
    bounds = st.slider("–î–∏–∞–ø–∞–∑–æ–Ω –æ—Å–µ–π –¥–ª—è X –∏ Y", 1.0, 10.0, 5.0, step=0.5)
    
    st.markdown("---")
    show_surface = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å", value=True)
    show_3d = st.checkbox("3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", value=True)
    add_noise = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —à—É–º –≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã", value=False)
    noise_level = st.slider("–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞", 0.0, 1.0, 0.1) if add_noise else 0.0
    realtime_update = st.checkbox("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", value=True)
    
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        st.cache_data.clear()
        st.experimental_rerun()
    
    save_results = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

@st.cache_data
def generate_test_data(name, res, bnd):
    x = np.linspace(-bnd, bnd, res)
    y = np.linspace(-bnd, bnd, res)
    X, Y = np.meshgrid(x, y)
    if name == "Quadratic":
        Z = X**2 + Y**2
    elif name == "Rastrigin":
        Z = 10 * 2 + (X**2 - 10*np.cos(2*np.pi*X)) + (Y**2 - 10*np.cos(2*np.pi*Y))
    elif name == "Rosenbrock":
        Z = (1 - X)**2 + 100 * (Y - X**2)**2
    elif name == "Himmelblau":
        Z = (X**2 + Y - 11)**2 + (X + Y**2 - 7)**2
    return X, Y, Z

test_functions = {
    "Quadratic": {
        "func": lambda p: np.sum(p**2),
        "grad": lambda p: 2 * p
    },
    "Rastrigin": {
        "func": lambda p: 10 * 2 + (p[0]**2 - 10*np.cos(2*np.pi*p[0])) + (p[1]**2 - 10*np.cos(2*np.pi*p[1])),
        "grad": lambda p: np.array([2*p[0] + 20*np.pi*np.sin(2*np.pi*p[0]), 2*p[1] + 20*np.pi*np.sin(2*np.pi*p[1])])
    },
    "Rosenbrock": {
        "func": lambda p: (1 - p[0])**2 + 100 * (p[1] - p[0]**2)**2,
        "grad": lambda p: np.array([-2*(1-p[0]) - 400*p[0]*(p[1]-p[0]**2), 200*(p[1]-p[0]**2)])
    },
    "Himmelblau": {
        "func": lambda p: (p[0]**2 + p[1] - 11)**2 + (p[0] + p[1]**2 - 7)**2,
        "grad": lambda p: np.array([4*p[0]*(p[0]**2 + p[1] - 11) + 2*(p[0] + p[1]**2 - 7), 
                                  2*(p[0]**2 + p[1] - 11) + 4*p[1]*(p[0] + p[1]**2 - 7)])
    }
}

@st.cache_resource
def init_optimizer(opt_name, lr, momentum, wd):
    if opt_name == "SGD":
        return StochasticGradientDescent(learning_rate=lr, momentum=momentum)
    elif opt_name == "GD":
        return GradientDescent(learning_rate=lr)
    elif opt_name == "RMSProp":
        return RMSProp(learning_rate=lr, momentum=momentum)
    elif opt_name == "AdamW":
        return AdamW(learning_rate=lr, weight_decay=wd)
    elif opt_name == "Lion":
        return Lion(learning_rate=lr, weight_decay=wd)
    elif opt_name == "Adan":
        return Adan(learning_rate=lr, weight_decay=wd)
    elif opt_name == "MARS":
        return MARS(learning_rate=lr, momentum=momentum)
    return None

async def run_optimization(opt, start_params, test_func, iterations, noise_level, bounds):
    params = [start_params.copy()]
    trajectory = [start_params.copy()]
    losses = [test_functions[test_func]["func"](start_params)]  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
    grad_norms = []
    
    try:
        for i in range(iterations):
            grad = test_functions[test_func]["grad"](params[0])
            if add_noise:
                grad += np.random.normal(0, noise_level, size=grad.shape)
                
            if np.any(np.isnan(grad)) or np.any(np.isinf(grad)):
                st.error(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è {opt.__class__.__name__}")
                break
                
            updated = opt.update(params, [grad])
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö bounds
            updated[0] = np.clip(updated[0], -bounds, bounds)
            trajectory.append(updated[0].copy())
            loss = test_functions[test_func]["func"](updated[0])
            losses.append(loss)
            grad_norms.append(np.linalg.norm(grad) if grad is not None else 0)
            params = updated
            
            await asyncio.sleep(0)  # –î–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
        return trajectory, losses, grad_norms
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {opt.__class__.__name__}: {e}")
        return trajectory, losses, grad_norms

X, Y, Z = generate_test_data(test_func, resolution, bounds)
progress_bar = st.progress(0)
trajectories = {}
plot_placeholder = st.empty()

start = np.random.uniform(-bounds, bounds, size=(2,))
for idx, opt_name in enumerate(optimizers):
    opt = init_optimizer(opt_name, learning_rate, momentum, weight_decay)
    trajectory, losses, grad_norms = asyncio.run(
        run_optimization(opt, start, test_func, iterations, noise_level, bounds)
    )
    trajectories[opt_name] = {
        'traj': trajectory,
        'loss': losses,
        'grad_norms': grad_norms
    }
    progress_bar.progress((idx + 1) / len(optimizers))

fig = go.Figure()
if show_3d:
    if show_surface:
        fig.add_trace(go.Surface(x=X, y=Y, z=Z, opacity=0.7, showscale=False, showlegend=False))
    for opt_name, data in trajectories.items():
        min_len = min(len(data['traj']), len(data['loss']))
        if min_len == 0:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {opt_name}")
            continue
        df = pd.DataFrame({
            'x': [p[0] for p in data['traj'][:min_len]],
            'y': [p[1] for p in data['traj'][:min_len]],
            'loss': data['loss'][:min_len]
        })
        fig.add_trace(go.Scatter3d(
            x=df['x'], y=df['y'], z=df['loss'],
            mode='markers+lines', name=opt_name,
            marker=dict(size=4), line=dict(width=2),
            showlegend=True
        ))
    fig.update_layout(title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤ –Ω–∞ {test_func} (3D)")
else:
    fig.add_trace(go.Contour(
        x=X[0, :], y=Y[:, 0], z=Z,
        colorscale='Viridis',
        showscale=True,
        showlegend=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞
    ))
    for opt_name, data in trajectories.items():
        min_len = min(len(data['traj']), len(data['loss']))
        if min_len == 0:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {opt_name}")
            continue
        df = pd.DataFrame({
            'x': [p[0] for p in data['traj'][:min_len]],
            'y': [p[1] for p in data['traj'][:min_len]]
        })
        fig.add_trace(go.Scatter(
            x=df['x'], y=df['y'],
            mode='markers+lines', name=opt_name,
            marker=dict(size=8), line=dict(width=2),
            showlegend=True
        ))
    fig.update_layout(title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤ –Ω–∞ {test_func} (2D)")

frames = []
max_traj_len = max(len(data['traj']) for data in trajectories.values()) if trajectories else 1
for i in range(1, max_traj_len):
    frame_data = []
    if show_3d and show_surface:
        frame_data.append(go.Surface(x=X, y=Y, z=Z, opacity=0.7, showlegend=False))
    for opt_name, data in trajectories.items():
        if i <= len(data['traj']):
            min_len = min(len(data['traj'][:i]), len(data['loss']))
            if min_len == 0:
                continue
            df = pd.DataFrame({
                'x': [p[0] for p in data['traj'][:min_len]],
                'y': [p[1] for p in data['traj'][:min_len]],
                'loss': data['loss'][:min_len]
            })
            if show_3d:
                frame_data.append(go.Scatter3d(
                    x=df['x'], y=df['y'], z=df['loss'],
                    mode='markers+lines', name=opt_name,
                    marker=dict(size=4), line=dict(width=2),
                    showlegend=True
                ))
            else:
                frame_data.append(go.Scatter(
                    x=df['x'], y=df['y'],
                    mode='markers+lines', name=opt_name,
                    marker=dict(size=8), line=dict(width=2),
                    showlegend=True
                ))
    frames.append(go.Frame(data=frame_data, name=str(i)))

fig.update(frames=frames)
fig.update_layout(
    updatemenus=[dict(
        type="buttons",
        buttons=[dict(label="Play", method="animate", args=[None, {"frame": {"duration": 50, "redraw": True}, "fromcurrent": True}])]
    )],
    showlegend=True
)


if realtime_update or not trajectories:
    plot_placeholder.plotly_chart(fig, use_container_width=True)


st.header("üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
cols = st.columns(len(optimizers))
for idx, opt_name in enumerate(optimizers):
    with cols[idx]:
        st.markdown(f"**{opt_name}**")
        if trajectories[opt_name]['loss']:
            st.markdown(f"–§–∏–Ω–∞–ª—å–Ω—ã–π Loss: {trajectories[opt_name]['loss'][-1]:.4f}")
        else:
            st.markdown("–§–∏–Ω–∞–ª—å–Ω—ã–π Loss: N/A")
        st.markdown(f"–ò—Ç–µ—Ä–∞—Ü–∏–∏: {len(trajectories[opt_name]['loss']) - 1}")  # -1, —Ç.–∫. –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        st.markdown(f"LR: {learning_rate:.4f}")

st.subheader("–ò—Å—Ç–æ—Ä–∏—è Loss")
loss_fig = go.Figure()
for opt_name, data in trajectories.items():
    if data['loss']:
        df_loss = pd.DataFrame({'Loss': data['loss'], 'Iteration': range(len(data['loss']))})
        loss_fig.add_trace(go.Scatter(x=df_loss['Iteration'], y=df_loss['Loss'], mode='lines', name=opt_name))
loss_fig.update_layout(title='Loss –Ω–∞ –ª–æ–≥. —à–∫–∞–ª–µ', yaxis_type="log")
st.plotly_chart(loss_fig, use_container_width=True)

st.subheader("–ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤")
grad_fig = go.Figure()
for opt_name, data in trajectories.items():
    if data['grad_norms']:
        df_grad = pd.DataFrame({'GradNorm': data['grad_norms'], 'Iteration': range(1, len(data['grad_norms']) + 1)})
        grad_fig.add_trace(go.Scatter(x=df_grad['Iteration'], y=df_grad['GradNorm'], mode='lines', name=opt_name))
grad_fig.update_layout(title='–ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤')
st.plotly_chart(grad_fig, use_container_width=True)

if save_results:
    for opt_name, data in trajectories.items():
        min_len = min(len(data['traj']), len(data['loss']))
        if min_len == 0:
            st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è {opt_name}")
            continue
        df = pd.DataFrame({
            'x': [p[0] for p in data['traj'][:min_len]],
            'y': [p[1] for p in data['traj'][:min_len]],
            'loss': data['loss'][:min_len],
            'grad_norm': data['grad_norms'][:min_len] if data['grad_norms'] else [0] * min_len
        })
        df.to_csv(f"{opt_name}_{test_func}_results.csv", index=False)
    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

st.markdown("---")
st.header(f"‚ÑπÔ∏è –û {test_func} –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞—Ö")

# –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
st.subheader("–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
if test_func == "Quadratic":
    st.markdown("""
    **Quadratic** ‚Äî –ø—Ä–æ—Å—Ç–∞—è –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = x¬≤ + y¬≤ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (0,0).
    """)
elif test_func == "Rastrigin":
    st.markdown("""
    **Rastrigin** ‚Äî –º—É–ª—å—Ç–∏-–º–æ–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = 20 + x¬≤ + y¬≤ - 10(cos(2œÄx) + cos(2œÄy)) —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –≤ (0,0) –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤.
    """)
elif test_func == "Rosenbrock":
    st.markdown("""
    **Rosenbrock** ‚Äî –Ω–µ–ª–∏–Ω–µ–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = (1 - x)¬≤ + 100(y - x¬≤)¬≤, —Å–ª–æ–∂–Ω–∞—è –∏–∑-–∑–∞ —É–∑–∫–æ–π –∏–∑–æ–≥–Ω—É—Ç–æ–π –¥–æ–ª–∏–Ω—ã.
    """)
elif test_func == "Himmelblau":
    st.markdown("""
    **Himmelblau** ‚Äî –º—É–ª—å—Ç–∏-–º–æ–¥–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x, y) = (x¬≤ + y - 11)¬≤ + (x + y¬≤ - 7)¬≤ —Å —á–µ—Ç—ã—Ä—å–º—è –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–∏–Ω–∏–º—É–º–∞–º–∏.
    """)

st.subheader("–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã")
for opt_name in optimizers:
    if opt_name == "SGD":
        with st.expander("SGD ‚Äî –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ —Å –º–æ–º–µ–Ω—Ç—É–º–æ–º"):
            st.markdown("""
            **SGD** –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö. –ú–æ–º–µ–Ω—Ç—É–º —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, —É—Å–∫–æ—Ä—è—è –æ–±—É—á–µ–Ω–∏–µ.
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
            - –ü—Ä–æ—Å—Ç –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
            - –¢—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è.
            - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤.
            
            """)
    elif opt_name == "GD":
        with st.expander("GD ‚Äî –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫"):
            st.markdown("""
            **GD** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞ –≤—Å—ë–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏.
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
            - –ù–∞–¥—ë–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –æ–¥–Ω–∏–º –º–∏–Ω–∏–º—É–º–æ–º.
            - –ú–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.
            - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏–ª–∏ –¥–ª—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
            
            """)
    elif opt_name == "RMSProp":
        with st.expander("RMSProp ‚Äî –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º"):
            st.markdown("""
            **RMSProp** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
            - –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏.
            - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.
            - –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
            
            """)
    elif opt_name == "AdamW":
        with st.expander("AdamW ‚Äî Adam —Å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π –≤–µ—Å–æ–≤"):
            st.markdown("""
            **AdamW** —Å–æ—á–µ—Ç–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π, —É–ª—É—á—à–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –æ–±–æ–±—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
            - –ë—ã—Å—Ç—Ä–æ —Å—Ö–æ–¥–∏—Ç—Å—è –∏ —É—Å—Ç–æ–π—á–∏–≤ –∫ —à—É–º—É.
            - –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ CNN –∏ Transformer.
            - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏, —á–µ–º SGD.
            
            """)
    elif opt_name == "Lion":
        with st.expander("Lion ‚Äî –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å –≤—ã—Å–æ–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"):
            st.markdown("""
            **Lion** –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã.
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
            - –ü—Ä–æ—Å—Ç –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω.
            - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ Transformer.
            - –ú–µ–Ω–µ–µ –∏–∑—É—á–µ–Ω, —á–µ–º Adam.
            
            """)
    elif opt_name == "Adan":
        with st.expander("Adan ‚Äî –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"):
            st.markdown("""
            **Adan** —É—Å–∫–æ—Ä—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ, –∫–æ–º–±–∏–Ω–∏—Ä—É—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
            - –ë—ã—Å—Ç—Ä–µ–µ Adam –Ω–∞ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª—è—Ö.
            - –£—Å—Ç–æ–π—á–∏–≤ –∫ —à—É–º–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
            - –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
            
            """)
    elif opt_name == "MARS":
        with st.expander("MARS ‚Äî –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä"):
            st.markdown("""
            **MARS** ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
            
            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**:
            - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã.
            - –ú–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.
            - –¢—Ä–µ–±—É–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

            """)
